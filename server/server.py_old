import time
import grpc
from concurrent import futures
import logging

# OpenTelemetry 설정
from opentelemetry import metrics
from opentelemetry.exporter.prometheus import PrometheusMetricReader
from opentelemetry.sdk.metrics import MeterProvider
from opentelemetry.instrumentation.grpc import GrpcInstrumentorServer
from prometheus_client import start_http_server

# Protobuf 컴파일된 코드
import streaming_pb2
import streaming_pb2_grpc

# --- 헬스 체크를 위한 추가 import ---
from grpc_health.v1 import health
from grpc_health.v1 import health_pb2
from grpc_health.v1 import health_pb2_grpc

logging.basicConfig(level=logging.INFO)

# 1. OpenTelemetry 메트릭 설정
reader = PrometheusMetricReader()
provider = MeterProvider(metric_readers=[reader])
metrics.set_meter_provider(provider)

# 2. gRPC 서버 자동 계측
grpc_server_instrumentor = GrpcInstrumentorServer()
grpc_server_instrumentor.instrument()

class StreamerService(streaming_pb2_grpc.StreamerServicer):
    """gRPC 스트리밍 서비스 구현"""
    def ProcessTextStream(self, request_iterator, context):
        logging.info("New stream opened.")
        message_count = 0
        try:
            for request in request_iterator:
                message_count += 1
                # 실제 음성 처리 로직을 모방하기 위한 약간의 딜레이
                time.sleep(0.01)
            logging.info(f"Stream closed. Processed {message_count} messages.")
            return streaming_pb2.TextResponse(message_count=message_count)
        except grpc.RpcError as e:
            logging.error(f"Stream broken: {e.details()}")
            # 클라이언트 연결이 끊겼을 때도 정상 종료
            return streaming_pb2.TextResponse(message_count=message_count)


def serve():
    # 3. Prometheus 메트릭을 노출할 HTTP 서버 시작 (포트 8000)
    start_http_server(port=8000, addr="0.0.0.0")
    logging.info("Started Prometheus metrics server on port 8000.")

    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    streaming_pb2_grpc.add_StreamerServicer_to_server(StreamerService(), server)

    # --- 헬스 체크 서비스 설정 및 추가 ---
    health_servicer = health.HealthServicer()
    health_pb2_grpc.add_HealthServicer_to_server(health_servicer, server)
    
    # 전체 서버의 기본 상태를 SERVING으로 설정합니다.
    # 특정 서비스별로 상태를 다르게 설정할 수도 있습니다.
    health_servicer.set("", health_pb2.HealthCheckResponse.SERVING)
    # ------------------------------------

    server.add_insecure_port("[::]:50051")
    server.start()
    logging.info("gRPC server started on port 50051.")
    server.wait_for_termination()

if __name__ == "__main__":
    serve()
